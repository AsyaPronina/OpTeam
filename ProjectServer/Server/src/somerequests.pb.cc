// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: somerequests.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "somerequests.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProjectServerRequests {

namespace {

const ::google::protobuf::Descriptor* Project_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Project_reflection_ = NULL;
const ::google::protobuf::Descriptor* Participant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Participant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Topic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Topic_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Topic_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignUserResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllProjectsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllProjectsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllProjectsResponse_IdToProjectsEntry_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* REQUEST_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RESPONSE_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_somerequests_2eproto() {
  protobuf_AddDesc_somerequests_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "somerequests.proto");
  GOOGLE_CHECK(file != NULL);
  Project_descriptor_ = file->message_type(0);
  static const int Project_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, assignee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, topics_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, participants_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, name_),
  };
  Project_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Project_descriptor_,
      Project::default_instance_,
      Project_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, _has_bits_[0]),
      -1,
      -1,
      sizeof(Project),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Project, _internal_metadata_),
      -1);
  Participant_descriptor_ = file->message_type(1);
  static const int Participant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, ip_),
  };
  Participant_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Participant_descriptor_,
      Participant::default_instance_,
      Participant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, _has_bits_[0]),
      -1,
      -1,
      sizeof(Participant),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Participant, _internal_metadata_),
      -1);
  Topic_descriptor_ = file->message_type(2);
  static const int Topic_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, assignee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, comments_),
  };
  Topic_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Topic_descriptor_,
      Topic::default_instance_,
      Topic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, _has_bits_[0]),
      -1,
      -1,
      sizeof(Topic),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Topic, _internal_metadata_),
      -1);
  Topic_TYPE_descriptor_ = Topic_descriptor_->enum_type(0);
  SignUserRequest_descriptor_ = file->message_type(3);
  static const int SignUserRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUserRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUserRequest, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUserRequest, userpassword_),
  };
  SignUserRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignUserRequest_descriptor_,
      SignUserRequest::default_instance_,
      SignUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUserRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignUserRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUserRequest, _internal_metadata_),
      -1);
  SignUserResponse_descriptor_ = file->message_type(4);
  static const int SignUserResponse_offsets_[1] = {
  };
  SignUserResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SignUserResponse_descriptor_,
      SignUserResponse::default_instance_,
      SignUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUserResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(SignUserResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignUserResponse, _internal_metadata_),
      -1);
  GetAllProjectsResponse_descriptor_ = file->message_type(5);
  static const int GetAllProjectsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProjectsResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProjectsResponse, id_to_projects_),
  };
  GetAllProjectsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetAllProjectsResponse_descriptor_,
      GetAllProjectsResponse::default_instance_,
      GetAllProjectsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProjectsResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(GetAllProjectsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllProjectsResponse, _internal_metadata_),
      -1);
  GetAllProjectsResponse_IdToProjectsEntry_descriptor_ = GetAllProjectsResponse_descriptor_->nested_type(0);
  REQUEST_ID_descriptor_ = file->enum_type(0);
  RESPONSE_ID_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_somerequests_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Project_descriptor_, &Project::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Participant_descriptor_, &Participant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Topic_descriptor_, &Topic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignUserRequest_descriptor_, &SignUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SignUserResponse_descriptor_, &SignUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetAllProjectsResponse_descriptor_, &GetAllProjectsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
        GetAllProjectsResponse_IdToProjectsEntry_descriptor_,
        ::google::protobuf::internal::MapEntry<
            ::google::protobuf::int32,
            ::ProjectServerRequests::Project,
            ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
            ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
            0>::CreateDefaultInstance(
                GetAllProjectsResponse_IdToProjectsEntry_descriptor_));
}

}  // namespace

void protobuf_ShutdownFile_somerequests_2eproto() {
  delete Project::default_instance_;
  delete Project_reflection_;
  delete Participant::default_instance_;
  delete Participant_reflection_;
  delete Participant::_default_ip_;
  delete Topic::default_instance_;
  delete Topic_reflection_;
  delete SignUserRequest::default_instance_;
  delete SignUserRequest_reflection_;
  delete SignUserResponse::default_instance_;
  delete SignUserResponse_reflection_;
  delete GetAllProjectsResponse::default_instance_;
  delete GetAllProjectsResponse_reflection_;
}

void protobuf_AddDesc_somerequests_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022somerequests.proto\022\025ProjectServerReque"
    "sts\"x\n\007Project\022\n\n\002id\030\001 \002(\005\022\020\n\010owner_id\030\002"
    " \002(\005\022\023\n\013assignee_id\030\003 \002(\005\022\022\n\ntopics_ids\030"
    "\004 \003(\005\022\030\n\020participants_ids\030\005 \003(\005\022\014\n\004name\030"
    "\006 \002(\t\"<\n\013Participant\022\n\n\002id\030\001 \002(\005\022\014\n\004name"
    "\030\002 \002(\t\022\023\n\002ip\030\003 \001(\t:\0070.0.0.0\"\317\001\n\005Topic\022\n\n"
    "\002id\030\001 \002(\005\022\022\n\nproject_id\030\002 \002(\005\022\020\n\010owner_i"
    "d\030\003 \002(\005\022\023\n\013assignee_id\030\004 \002(\005\022/\n\004type\030\006 \002"
    "(\0162!.ProjectServerRequests.Topic.TYPE\022\014\n"
    "\004name\030\005 \002(\t\022\023\n\013description\030\007 \002(\t\022\020\n\010comm"
    "ents\030\010 \003(\t\"\031\n\004TYPE\022\010\n\004TASK\020\000\022\007\n\003BUG\020\001\"h\n"
    "\017SignUserRequest\022-\n\002ID\030\001 \002(\0162!.ProjectSe"
    "rverRequests.REQUEST_ID\022\020\n\010UserName\030\002 \002("
    "\t\022\024\n\014UserPassword\030\003 \002(\t\"\022\n\020SignUserRespo"
    "nse\"\366\001\n\026GetAllProjectsResponse\022.\n\002ID\030\001 \002"
    "(\0162\".ProjectServerRequests.RESPONSE_ID\022W"
    "\n\016id_to_projects\030\002 \003(\0132\?.ProjectServerRe"
    "quests.GetAllProjectsResponse.IdToProjec"
    "tsEntry\032S\n\021IdToProjectsEntry\022\013\n\003key\030\001 \001("
    "\005\022-\n\005value\030\002 \001(\0132\036.ProjectServerRequests"
    ".Project:\0028\001*a\n\nREQUEST_ID\022\031\n\025REGISTER_U"
    "SER_REQUEST\020\000\022\032\n\026AUTHORIZE_USER_REQUEST\020"
    "\001\022\034\n\030GET_ALL_PROJECTS_REQUEST\020\002*e\n\013RESPO"
    "NSE_ID\022\032\n\026REGISTER_USER_RESPONSE\020\000\022\033\n\027AU"
    "THORIZE_USER_RESPONSE\020\001\022\035\n\031GET_ALL_PROJE"
    "CTS_RESPONSE\020\002", 1014);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "somerequests.proto", &protobuf_RegisterTypes);
  Project::default_instance_ = new Project();
  Participant::_default_ip_ =
      new ::std::string("0.0.0.0", 7);
  Participant::default_instance_ = new Participant();
  Topic::default_instance_ = new Topic();
  SignUserRequest::default_instance_ = new SignUserRequest();
  SignUserResponse::default_instance_ = new SignUserResponse();
  GetAllProjectsResponse::default_instance_ = new GetAllProjectsResponse();
  Project::default_instance_->InitAsDefaultInstance();
  Participant::default_instance_->InitAsDefaultInstance();
  Topic::default_instance_->InitAsDefaultInstance();
  SignUserRequest::default_instance_->InitAsDefaultInstance();
  SignUserResponse::default_instance_->InitAsDefaultInstance();
  GetAllProjectsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_somerequests_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_somerequests_2eproto {
  StaticDescriptorInitializer_somerequests_2eproto() {
    protobuf_AddDesc_somerequests_2eproto();
  }
} static_descriptor_initializer_somerequests_2eproto_;
const ::google::protobuf::EnumDescriptor* REQUEST_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUEST_ID_descriptor_;
}
bool REQUEST_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RESPONSE_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESPONSE_ID_descriptor_;
}
bool RESPONSE_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Project::kIdFieldNumber;
const int Project::kOwnerIdFieldNumber;
const int Project::kAssigneeIdFieldNumber;
const int Project::kTopicsIdsFieldNumber;
const int Project::kParticipantsIdsFieldNumber;
const int Project::kNameFieldNumber;
#endif  // !_MSC_VER

Project::Project()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProjectServerRequests.Project)
}

void Project::InitAsDefaultInstance() {
}

Project::Project(const Project& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProjectServerRequests.Project)
}

void Project::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  owner_id_ = 0;
  assignee_id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Project::~Project() {
  // @@protoc_insertion_point(destructor:ProjectServerRequests.Project)
  SharedDtor();
}

void Project::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Project::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Project::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Project_descriptor_;
}

const Project& Project::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_somerequests_2eproto();
  return *default_instance_;
}

Project* Project::default_instance_ = NULL;

Project* Project::New(::google::protobuf::Arena* arena) const {
  Project* n = new Project;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Project::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Project*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 39u) {
    ZR_(id_, owner_id_);
    assignee_id_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  topics_ids_.Clear();
  participants_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Project::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProjectServerRequests.Project)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // required int32 owner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_assignee_id;
        break;
      }

      // required int32 assignee_id = 3;
      case 3: {
        if (tag == 24) {
         parse_assignee_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assignee_id_)));
          set_has_assignee_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_topics_ids;
        break;
      }

      // repeated int32 topics_ids = 4;
      case 4: {
        if (tag == 32) {
         parse_topics_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_topics_ids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_topics_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_topics_ids;
        if (input->ExpectTag(40)) goto parse_participants_ids;
        break;
      }

      // repeated int32 participants_ids = 5;
      case 5: {
        if (tag == 40) {
         parse_participants_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_participants_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_participants_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_participants_ids;
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // required string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProjectServerRequests.Project.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProjectServerRequests.Project)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProjectServerRequests.Project)
  return false;
#undef DO_
}

void Project::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProjectServerRequests.Project)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->owner_id(), output);
  }

  // required int32 assignee_id = 3;
  if (has_assignee_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->assignee_id(), output);
  }

  // repeated int32 topics_ids = 4;
  for (int i = 0; i < this->topics_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->topics_ids(i), output);
  }

  // repeated int32 participants_ids = 5;
  for (int i = 0; i < this->participants_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->participants_ids(i), output);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Project.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProjectServerRequests.Project)
}

::google::protobuf::uint8* Project::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectServerRequests.Project)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->owner_id(), target);
  }

  // required int32 assignee_id = 3;
  if (has_assignee_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->assignee_id(), target);
  }

  // repeated int32 topics_ids = 4;
  for (int i = 0; i < this->topics_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->topics_ids(i), target);
  }

  // repeated int32 participants_ids = 5;
  for (int i = 0; i < this->participants_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->participants_ids(i), target);
  }

  // required string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Project.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectServerRequests.Project)
  return target;
}

int Project::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_owner_id()) {
    // required int32 owner_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_id());
  }

  if (has_assignee_id()) {
    // required int32 assignee_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->assignee_id());
  }

  if (has_name()) {
    // required string name = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int Project::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000027) ^ 0x00000027) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 owner_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_id());

    // required int32 assignee_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->assignee_id());

    // required string name = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 topics_ids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->topics_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->topics_ids(i));
    }
    total_size += 1 * this->topics_ids_size() + data_size;
  }

  // repeated int32 participants_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->participants_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->participants_ids(i));
    }
    total_size += 1 * this->participants_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Project::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Project* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Project>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Project::MergeFrom(const Project& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  topics_ids_.MergeFrom(from.topics_ids_);
  participants_ids_.MergeFrom(from.participants_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_assignee_id()) {
      set_assignee_id(from.assignee_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Project::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Project::CopyFrom(const Project& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Project::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000027) != 0x00000027) return false;

  return true;
}

void Project::Swap(Project* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Project::InternalSwap(Project* other) {
  std::swap(id_, other->id_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(assignee_id_, other->assignee_id_);
  topics_ids_.UnsafeArenaSwap(&other->topics_ids_);
  participants_ids_.UnsafeArenaSwap(&other->participants_ids_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Project::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Project_descriptor_;
  metadata.reflection = Project_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Project

// required int32 id = 1;
bool Project::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Project::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Project::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Project::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Project::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.id)
  return id_;
}
 void Project::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.id)
}

// required int32 owner_id = 2;
bool Project::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Project::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Project::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Project::clear_owner_id() {
  owner_id_ = 0;
  clear_has_owner_id();
}
 ::google::protobuf::int32 Project::owner_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.owner_id)
  return owner_id_;
}
 void Project::set_owner_id(::google::protobuf::int32 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.owner_id)
}

// required int32 assignee_id = 3;
bool Project::has_assignee_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Project::set_has_assignee_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Project::clear_has_assignee_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Project::clear_assignee_id() {
  assignee_id_ = 0;
  clear_has_assignee_id();
}
 ::google::protobuf::int32 Project::assignee_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.assignee_id)
  return assignee_id_;
}
 void Project::set_assignee_id(::google::protobuf::int32 value) {
  set_has_assignee_id();
  assignee_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.assignee_id)
}

// repeated int32 topics_ids = 4;
int Project::topics_ids_size() const {
  return topics_ids_.size();
}
void Project::clear_topics_ids() {
  topics_ids_.Clear();
}
 ::google::protobuf::int32 Project::topics_ids(int index) const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.topics_ids)
  return topics_ids_.Get(index);
}
 void Project::set_topics_ids(int index, ::google::protobuf::int32 value) {
  topics_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.topics_ids)
}
 void Project::add_topics_ids(::google::protobuf::int32 value) {
  topics_ids_.Add(value);
  // @@protoc_insertion_point(field_add:ProjectServerRequests.Project.topics_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Project::topics_ids() const {
  // @@protoc_insertion_point(field_list:ProjectServerRequests.Project.topics_ids)
  return topics_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Project::mutable_topics_ids() {
  // @@protoc_insertion_point(field_mutable_list:ProjectServerRequests.Project.topics_ids)
  return &topics_ids_;
}

// repeated int32 participants_ids = 5;
int Project::participants_ids_size() const {
  return participants_ids_.size();
}
void Project::clear_participants_ids() {
  participants_ids_.Clear();
}
 ::google::protobuf::int32 Project::participants_ids(int index) const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.participants_ids)
  return participants_ids_.Get(index);
}
 void Project::set_participants_ids(int index, ::google::protobuf::int32 value) {
  participants_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.participants_ids)
}
 void Project::add_participants_ids(::google::protobuf::int32 value) {
  participants_ids_.Add(value);
  // @@protoc_insertion_point(field_add:ProjectServerRequests.Project.participants_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Project::participants_ids() const {
  // @@protoc_insertion_point(field_list:ProjectServerRequests.Project.participants_ids)
  return participants_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Project::mutable_participants_ids() {
  // @@protoc_insertion_point(field_mutable_list:ProjectServerRequests.Project.participants_ids)
  return &participants_ids_;
}

// required string name = 6;
bool Project::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Project::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
void Project::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void Project::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Project::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.name)
}
 void Project::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Project.name)
}
 void Project::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Project.name)
}
 ::std::string* Project::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Project.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Project::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Project::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Project.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::std::string* Participant::_default_ip_ = NULL;
#ifndef _MSC_VER
const int Participant::kIdFieldNumber;
const int Participant::kNameFieldNumber;
const int Participant::kIpFieldNumber;
#endif  // !_MSC_VER

Participant::Participant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProjectServerRequests.Participant)
}

void Participant::InitAsDefaultInstance() {
}

Participant::Participant(const Participant& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProjectServerRequests.Participant)
}

void Participant::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(_default_ip_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Participant::~Participant() {
  // @@protoc_insertion_point(destructor:ProjectServerRequests.Participant)
  SharedDtor();
}

void Participant::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(_default_ip_);
  if (this != default_instance_) {
  }
}

void Participant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Participant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Participant_descriptor_;
}

const Participant& Participant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_somerequests_2eproto();
  return *default_instance_;
}

Participant* Participant::default_instance_ = NULL;

Participant* Participant::New(::google::protobuf::Arena* arena) const {
  Participant* n = new Participant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Participant::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ip()) {
      ip_.ClearToDefaultNoArena(_default_ip_);
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Participant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProjectServerRequests.Participant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProjectServerRequests.Participant.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3 [default = "0.0.0.0"];
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProjectServerRequests.Participant.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProjectServerRequests.Participant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProjectServerRequests.Participant)
  return false;
#undef DO_
}

void Participant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProjectServerRequests.Participant)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Participant.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string ip = 3 [default = "0.0.0.0"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Participant.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProjectServerRequests.Participant)
}

::google::protobuf::uint8* Participant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectServerRequests.Participant)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Participant.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string ip = 3 [default = "0.0.0.0"];
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Participant.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectServerRequests.Participant)
  return target;
}

int Participant::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  return total_size;
}
int Participant::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string ip = 3 [default = "0.0.0.0"];
  if (has_ip()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Participant::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Participant* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Participant>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Participant::MergeFrom(const Participant& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(_default_ip_, from.ip_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Participant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Participant::CopyFrom(const Participant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Participant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Participant::Swap(Participant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Participant::InternalSwap(Participant* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  ip_.Swap(&other->ip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Participant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Participant_descriptor_;
  metadata.reflection = Participant_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Participant

// required int32 id = 1;
bool Participant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Participant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Participant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Participant::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Participant::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Participant.id)
  return id_;
}
 void Participant::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Participant.id)
}

// required string name = 2;
bool Participant::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Participant::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void Participant::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void Participant::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Participant::name() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Participant.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Participant::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Participant.name)
}
 void Participant::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Participant.name)
}
 void Participant::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Participant.name)
}
 ::std::string* Participant::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Participant.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Participant::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Participant::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Participant.name)
}

// optional string ip = 3 [default = "0.0.0.0"];
bool Participant::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Participant::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
void Participant::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
void Participant::clear_ip() {
  ip_.ClearToDefaultNoArena(_default_ip_);
  clear_has_ip();
}
 const ::std::string& Participant::ip() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Participant.ip)
  return ip_.GetNoArena(_default_ip_);
}
 void Participant::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_, value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Participant.ip)
}
 void Participant::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Participant.ip)
}
 void Participant::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Participant.ip)
}
 ::std::string* Participant::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Participant.ip)
  return ip_.MutableNoArena(_default_ip_);
}
 ::std::string* Participant::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(_default_ip_);
}
 void Participant::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(_default_ip_, ip);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Participant.ip)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Topic_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topic_TYPE_descriptor_;
}
bool Topic_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Topic_TYPE Topic::TASK;
const Topic_TYPE Topic::BUG;
const Topic_TYPE Topic::TYPE_MIN;
const Topic_TYPE Topic::TYPE_MAX;
const int Topic::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Topic::kIdFieldNumber;
const int Topic::kProjectIdFieldNumber;
const int Topic::kOwnerIdFieldNumber;
const int Topic::kAssigneeIdFieldNumber;
const int Topic::kTypeFieldNumber;
const int Topic::kNameFieldNumber;
const int Topic::kDescriptionFieldNumber;
const int Topic::kCommentsFieldNumber;
#endif  // !_MSC_VER

Topic::Topic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProjectServerRequests.Topic)
}

void Topic::InitAsDefaultInstance() {
}

Topic::Topic(const Topic& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProjectServerRequests.Topic)
}

void Topic::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  project_id_ = 0;
  owner_id_ = 0;
  assignee_id_ = 0;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Topic::~Topic() {
  // @@protoc_insertion_point(destructor:ProjectServerRequests.Topic)
  SharedDtor();
}

void Topic::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Topic_descriptor_;
}

const Topic& Topic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_somerequests_2eproto();
  return *default_instance_;
}

Topic* Topic::default_instance_ = NULL;

Topic* Topic::New(::google::protobuf::Arena* arena) const {
  Topic* n = new Topic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Topic::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Topic*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(id_, assignee_id_);
    type_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_description()) {
      description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  comments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProjectServerRequests.Topic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_project_id;
        break;
      }

      // required int32 project_id = 2;
      case 2: {
        if (tag == 16) {
         parse_project_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_id_)));
          set_has_project_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_owner_id;
        break;
      }

      // required int32 owner_id = 3;
      case 3: {
        if (tag == 24) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_assignee_id;
        break;
      }

      // required int32 assignee_id = 4;
      case 4: {
        if (tag == 32) {
         parse_assignee_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assignee_id_)));
          set_has_assignee_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProjectServerRequests.Topic.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required .ProjectServerRequests.Topic.TYPE type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProjectServerRequests::Topic_TYPE_IsValid(value)) {
            set_type(static_cast< ::ProjectServerRequests::Topic_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // required string description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProjectServerRequests.Topic.description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_comments;
        break;
      }

      // repeated string comments = 8;
      case 8: {
        if (tag == 66) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_comments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comments(this->comments_size() - 1).data(),
            this->comments(this->comments_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProjectServerRequests.Topic.comments");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_comments;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProjectServerRequests.Topic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProjectServerRequests.Topic)
  return false;
#undef DO_
}

void Topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProjectServerRequests.Topic)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 project_id = 2;
  if (has_project_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->project_id(), output);
  }

  // required int32 owner_id = 3;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->owner_id(), output);
  }

  // required int32 assignee_id = 4;
  if (has_assignee_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->assignee_id(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Topic.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required .ProjectServerRequests.Topic.TYPE type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // required string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Topic.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // repeated string comments = 8;
  for (int i = 0; i < this->comments_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comments(i).data(), this->comments(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Topic.comments");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->comments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProjectServerRequests.Topic)
}

::google::protobuf::uint8* Topic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectServerRequests.Topic)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 project_id = 2;
  if (has_project_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->project_id(), target);
  }

  // required int32 owner_id = 3;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->owner_id(), target);
  }

  // required int32 assignee_id = 4;
  if (has_assignee_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->assignee_id(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Topic.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required .ProjectServerRequests.Topic.TYPE type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // required string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Topic.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // repeated string comments = 8;
  for (int i = 0; i < this->comments_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comments(i).data(), this->comments(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.Topic.comments");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->comments(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectServerRequests.Topic)
  return target;
}

int Topic::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_project_id()) {
    // required int32 project_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->project_id());
  }

  if (has_owner_id()) {
    // required int32 owner_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_id());
  }

  if (has_assignee_id()) {
    // required int32 assignee_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->assignee_id());
  }

  if (has_type()) {
    // required .ProjectServerRequests.Topic.TYPE type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_name()) {
    // required string name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_description()) {
    // required string description = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  return total_size;
}
int Topic::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required int32 project_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->project_id());

    // required int32 owner_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_id());

    // required int32 assignee_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->assignee_id());

    // required .ProjectServerRequests.Topic.TYPE type = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required string name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string description = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string comments = 8;
  total_size += 1 * this->comments_size();
  for (int i = 0; i < this->comments_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->comments(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topic::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Topic* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Topic>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Topic::MergeFrom(const Topic& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  comments_.MergeFrom(from.comments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_project_id()) {
      set_project_id(from.project_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_assignee_id()) {
      set_assignee_id(from.assignee_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_description()) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Topic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topic::CopyFrom(const Topic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void Topic::Swap(Topic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Topic::InternalSwap(Topic* other) {
  std::swap(id_, other->id_);
  std::swap(project_id_, other->project_id_);
  std::swap(owner_id_, other->owner_id_);
  std::swap(assignee_id_, other->assignee_id_);
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  comments_.UnsafeArenaSwap(&other->comments_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Topic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Topic_descriptor_;
  metadata.reflection = Topic_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Topic

// required int32 id = 1;
bool Topic::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Topic::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Topic::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Topic::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Topic::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.id)
  return id_;
}
 void Topic::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.id)
}

// required int32 project_id = 2;
bool Topic::has_project_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Topic::set_has_project_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Topic::clear_has_project_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Topic::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
 ::google::protobuf::int32 Topic::project_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.project_id)
  return project_id_;
}
 void Topic::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.project_id)
}

// required int32 owner_id = 3;
bool Topic::has_owner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Topic::set_has_owner_id() {
  _has_bits_[0] |= 0x00000004u;
}
void Topic::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void Topic::clear_owner_id() {
  owner_id_ = 0;
  clear_has_owner_id();
}
 ::google::protobuf::int32 Topic::owner_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.owner_id)
  return owner_id_;
}
 void Topic::set_owner_id(::google::protobuf::int32 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.owner_id)
}

// required int32 assignee_id = 4;
bool Topic::has_assignee_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Topic::set_has_assignee_id() {
  _has_bits_[0] |= 0x00000008u;
}
void Topic::clear_has_assignee_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void Topic::clear_assignee_id() {
  assignee_id_ = 0;
  clear_has_assignee_id();
}
 ::google::protobuf::int32 Topic::assignee_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.assignee_id)
  return assignee_id_;
}
 void Topic::set_assignee_id(::google::protobuf::int32 value) {
  set_has_assignee_id();
  assignee_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.assignee_id)
}

// required .ProjectServerRequests.Topic.TYPE type = 6;
bool Topic::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Topic::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void Topic::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void Topic::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::ProjectServerRequests::Topic_TYPE Topic::type() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.type)
  return static_cast< ::ProjectServerRequests::Topic_TYPE >(type_);
}
 void Topic::set_type(::ProjectServerRequests::Topic_TYPE value) {
  assert(::ProjectServerRequests::Topic_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.type)
}

// required string name = 5;
bool Topic::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Topic::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
void Topic::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void Topic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Topic::name() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Topic::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.name)
}
 void Topic::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Topic.name)
}
 void Topic::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Topic.name)
}
 ::std::string* Topic::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Topic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Topic::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Topic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Topic.name)
}

// required string description = 7;
bool Topic::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Topic::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
void Topic::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
void Topic::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
 const ::std::string& Topic::description() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Topic::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.description)
}
 void Topic::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Topic.description)
}
 void Topic::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Topic.description)
}
 ::std::string* Topic::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Topic.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Topic::release_description() {
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Topic::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Topic.description)
}

// repeated string comments = 8;
int Topic::comments_size() const {
  return comments_.size();
}
void Topic::clear_comments() {
  comments_.Clear();
}
 const ::std::string& Topic::comments(int index) const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.comments)
  return comments_.Get(index);
}
 ::std::string* Topic::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Topic.comments)
  return comments_.Mutable(index);
}
 void Topic::set_comments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.comments)
  comments_.Mutable(index)->assign(value);
}
 void Topic::set_comments(int index, const char* value) {
  comments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Topic.comments)
}
 void Topic::set_comments(int index, const char* value, size_t size) {
  comments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Topic.comments)
}
 ::std::string* Topic::add_comments() {
  return comments_.Add();
}
 void Topic::add_comments(const ::std::string& value) {
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProjectServerRequests.Topic.comments)
}
 void Topic::add_comments(const char* value) {
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProjectServerRequests.Topic.comments)
}
 void Topic::add_comments(const char* value, size_t size) {
  comments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProjectServerRequests.Topic.comments)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Topic::comments() const {
  // @@protoc_insertion_point(field_list:ProjectServerRequests.Topic.comments)
  return comments_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Topic::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:ProjectServerRequests.Topic.comments)
  return &comments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int SignUserRequest::kIDFieldNumber;
const int SignUserRequest::kUserNameFieldNumber;
const int SignUserRequest::kUserPasswordFieldNumber;
#endif  // !_MSC_VER

SignUserRequest::SignUserRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProjectServerRequests.SignUserRequest)
}

void SignUserRequest::InitAsDefaultInstance() {
}

SignUserRequest::SignUserRequest(const SignUserRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProjectServerRequests.SignUserRequest)
}

void SignUserRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignUserRequest::~SignUserRequest() {
  // @@protoc_insertion_point(destructor:ProjectServerRequests.SignUserRequest)
  SharedDtor();
}

void SignUserRequest::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userpassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SignUserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignUserRequest_descriptor_;
}

const SignUserRequest& SignUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_somerequests_2eproto();
  return *default_instance_;
}

SignUserRequest* SignUserRequest::default_instance_ = NULL;

SignUserRequest* SignUserRequest::New(::google::protobuf::Arena* arena) const {
  SignUserRequest* n = new SignUserRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignUserRequest::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0;
    if (has_username()) {
      username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_userpassword()) {
      userpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProjectServerRequests.SignUserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProjectServerRequests.REQUEST_ID ID = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProjectServerRequests::REQUEST_ID_IsValid(value)) {
            set_id(static_cast< ::ProjectServerRequests::REQUEST_ID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // required string UserName = 2;
      case 2: {
        if (tag == 18) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProjectServerRequests.SignUserRequest.UserName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserPassword;
        break;
      }

      // required string UserPassword = 3;
      case 3: {
        if (tag == 26) {
         parse_UserPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userpassword().data(), this->userpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ProjectServerRequests.SignUserRequest.UserPassword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProjectServerRequests.SignUserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProjectServerRequests.SignUserRequest)
  return false;
#undef DO_
}

void SignUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProjectServerRequests.SignUserRequest)
  // required .ProjectServerRequests.REQUEST_ID ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // required string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.SignUserRequest.UserName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // required string UserPassword = 3;
  if (has_userpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), this->userpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.SignUserRequest.UserPassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->userpassword(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProjectServerRequests.SignUserRequest)
}

::google::protobuf::uint8* SignUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectServerRequests.SignUserRequest)
  // required .ProjectServerRequests.REQUEST_ID ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // required string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.SignUserRequest.UserName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // required string UserPassword = 3;
  if (has_userpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userpassword().data(), this->userpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ProjectServerRequests.SignUserRequest.UserPassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userpassword(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectServerRequests.SignUserRequest)
  return target;
}

int SignUserRequest::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required .ProjectServerRequests.REQUEST_ID ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  if (has_username()) {
    // required string UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  if (has_userpassword()) {
    // required string UserPassword = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());
  }

  return total_size;
}
int SignUserRequest::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .ProjectServerRequests.REQUEST_ID ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());

    // required string UserName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());

    // required string UserPassword = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userpassword());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SignUserRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignUserRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignUserRequest::MergeFrom(const SignUserRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (from.has_userpassword()) {
      set_has_userpassword();
      userpassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userpassword_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignUserRequest::CopyFrom(const SignUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SignUserRequest::Swap(SignUserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignUserRequest::InternalSwap(SignUserRequest* other) {
  std::swap(id_, other->id_);
  username_.Swap(&other->username_);
  userpassword_.Swap(&other->userpassword_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignUserRequest_descriptor_;
  metadata.reflection = SignUserRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignUserRequest

// required .ProjectServerRequests.REQUEST_ID ID = 1;
bool SignUserRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignUserRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SignUserRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignUserRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::ProjectServerRequests::REQUEST_ID SignUserRequest::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.SignUserRequest.ID)
  return static_cast< ::ProjectServerRequests::REQUEST_ID >(id_);
}
 void SignUserRequest::set_id(::ProjectServerRequests::REQUEST_ID value) {
  assert(::ProjectServerRequests::REQUEST_ID_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.SignUserRequest.ID)
}

// required string UserName = 2;
bool SignUserRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignUserRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void SignUserRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignUserRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
 const ::std::string& SignUserRequest::username() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.SignUserRequest.UserName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignUserRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.SignUserRequest.UserName)
}
 void SignUserRequest::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.SignUserRequest.UserName)
}
 void SignUserRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.SignUserRequest.UserName)
}
 ::std::string* SignUserRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.SignUserRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignUserRequest::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignUserRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.SignUserRequest.UserName)
}

// required string UserPassword = 3;
bool SignUserRequest::has_userpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignUserRequest::set_has_userpassword() {
  _has_bits_[0] |= 0x00000004u;
}
void SignUserRequest::clear_has_userpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignUserRequest::clear_userpassword() {
  userpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpassword();
}
 const ::std::string& SignUserRequest::userpassword() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.SignUserRequest.UserPassword)
  return userpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignUserRequest::set_userpassword(const ::std::string& value) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.SignUserRequest.UserPassword)
}
 void SignUserRequest::set_userpassword(const char* value) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.SignUserRequest.UserPassword)
}
 void SignUserRequest::set_userpassword(const char* value, size_t size) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.SignUserRequest.UserPassword)
}
 ::std::string* SignUserRequest::mutable_userpassword() {
  set_has_userpassword();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.SignUserRequest.UserPassword)
  return userpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SignUserRequest::release_userpassword() {
  clear_has_userpassword();
  return userpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SignUserRequest::set_allocated_userpassword(::std::string* userpassword) {
  if (userpassword != NULL) {
    set_has_userpassword();
  } else {
    clear_has_userpassword();
  }
  userpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpassword);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.SignUserRequest.UserPassword)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SignUserResponse::SignUserResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProjectServerRequests.SignUserResponse)
}

void SignUserResponse::InitAsDefaultInstance() {
}

SignUserResponse::SignUserResponse(const SignUserResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProjectServerRequests.SignUserResponse)
}

void SignUserResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignUserResponse::~SignUserResponse() {
  // @@protoc_insertion_point(destructor:ProjectServerRequests.SignUserResponse)
  SharedDtor();
}

void SignUserResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignUserResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignUserResponse_descriptor_;
}

const SignUserResponse& SignUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_somerequests_2eproto();
  return *default_instance_;
}

SignUserResponse* SignUserResponse::default_instance_ = NULL;

SignUserResponse* SignUserResponse::New(::google::protobuf::Arena* arena) const {
  SignUserResponse* n = new SignUserResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignUserResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SignUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProjectServerRequests.SignUserResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProjectServerRequests.SignUserResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProjectServerRequests.SignUserResponse)
  return false;
#undef DO_
}

void SignUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProjectServerRequests.SignUserResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProjectServerRequests.SignUserResponse)
}

::google::protobuf::uint8* SignUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectServerRequests.SignUserResponse)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectServerRequests.SignUserResponse)
  return target;
}

int SignUserResponse::ByteSize() const {
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SignUserResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SignUserResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignUserResponse::MergeFrom(const SignUserResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SignUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignUserResponse::CopyFrom(const SignUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignUserResponse::IsInitialized() const {

  return true;
}

void SignUserResponse::Swap(SignUserResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignUserResponse::InternalSwap(SignUserResponse* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignUserResponse_descriptor_;
  metadata.reflection = SignUserResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignUserResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int GetAllProjectsResponse::kIDFieldNumber;
const int GetAllProjectsResponse::kIdToProjectsFieldNumber;
#endif  // !_MSC_VER

GetAllProjectsResponse::GetAllProjectsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProjectServerRequests.GetAllProjectsResponse)
}

void GetAllProjectsResponse::InitAsDefaultInstance() {
}

GetAllProjectsResponse::GetAllProjectsResponse(const GetAllProjectsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProjectServerRequests.GetAllProjectsResponse)
}

void GetAllProjectsResponse::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  id_to_projects_.SetAssignDescriptorCallback(
      protobuf_AssignDescriptorsOnce);
  id_to_projects_.SetEntryDescriptor(
      &::ProjectServerRequests::GetAllProjectsResponse_IdToProjectsEntry_descriptor_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllProjectsResponse::~GetAllProjectsResponse() {
  // @@protoc_insertion_point(destructor:ProjectServerRequests.GetAllProjectsResponse)
  SharedDtor();
}

void GetAllProjectsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllProjectsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllProjectsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllProjectsResponse_descriptor_;
}

const GetAllProjectsResponse& GetAllProjectsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_somerequests_2eproto();
  return *default_instance_;
}

GetAllProjectsResponse* GetAllProjectsResponse::default_instance_ = NULL;

GetAllProjectsResponse* GetAllProjectsResponse::New(::google::protobuf::Arena* arena) const {
  GetAllProjectsResponse* n = new GetAllProjectsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAllProjectsResponse::Clear() {
  id_ = 0;
  id_to_projects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GetAllProjectsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProjectServerRequests.GetAllProjectsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProjectServerRequests.RESPONSE_ID ID = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ProjectServerRequests::RESPONSE_ID_IsValid(value)) {
            set_id(static_cast< ::ProjectServerRequests::RESPONSE_ID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_id_to_projects;
        break;
      }

      // map<int32, .ProjectServerRequests.Project> id_to_projects = 2;
      case 2: {
        if (tag == 18) {
         parse_id_to_projects:
          DO_(input->IncrementRecursionDepth());
         parse_loop_id_to_projects:
          ::google::protobuf::scoped_ptr<GetAllProjectsResponse_IdToProjectsEntry> entry(id_to_projects_.NewEntry());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, entry.get()));
          (*mutable_id_to_projects())[entry->key()].Swap(entry->mutable_value());
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_id_to_projects;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProjectServerRequests.GetAllProjectsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProjectServerRequests.GetAllProjectsResponse)
  return false;
#undef DO_
}

void GetAllProjectsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProjectServerRequests.GetAllProjectsResponse)
  // required .ProjectServerRequests.RESPONSE_ID ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // map<int32, .ProjectServerRequests.Project> id_to_projects = 2;
  {
    ::google::protobuf::scoped_ptr<GetAllProjectsResponse_IdToProjectsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >::const_iterator
        it = this->id_to_projects().begin();
        it != this->id_to_projects().end(); ++it) {
      entry.reset(id_to_projects_.NewEntryWrapper(it->first, it->second));
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
          2, *entry, output);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProjectServerRequests.GetAllProjectsResponse)
}

::google::protobuf::uint8* GetAllProjectsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectServerRequests.GetAllProjectsResponse)
  // required .ProjectServerRequests.RESPONSE_ID ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // map<int32, .ProjectServerRequests.Project> id_to_projects = 2;
  {
    ::google::protobuf::scoped_ptr<GetAllProjectsResponse_IdToProjectsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >::const_iterator
        it = this->id_to_projects().begin();
        it != this->id_to_projects().end(); ++it) {
      entry.reset(id_to_projects_.NewEntryWrapper(it->first, it->second));
      target = ::google::protobuf::internal::WireFormatLite::
          WriteMessageNoVirtualToArray(
              2, *entry, target);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectServerRequests.GetAllProjectsResponse)
  return target;
}

int GetAllProjectsResponse::ByteSize() const {
  int total_size = 0;

  // required .ProjectServerRequests.RESPONSE_ID ID = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }
  // map<int32, .ProjectServerRequests.Project> id_to_projects = 2;
  total_size += 1 * this->id_to_projects_size();
  {
    ::google::protobuf::scoped_ptr<GetAllProjectsResponse_IdToProjectsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >::const_iterator
        it = this->id_to_projects().begin();
        it != this->id_to_projects().end(); ++it) {
      entry.reset(id_to_projects_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllProjectsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const GetAllProjectsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAllProjectsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllProjectsResponse::MergeFrom(const GetAllProjectsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  id_to_projects_.MergeFrom(from.id_to_projects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GetAllProjectsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllProjectsResponse::CopyFrom(const GetAllProjectsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllProjectsResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->id_to_projects())) return false;
  return true;
}

void GetAllProjectsResponse::Swap(GetAllProjectsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllProjectsResponse::InternalSwap(GetAllProjectsResponse* other) {
  std::swap(id_, other->id_);
  id_to_projects_.Swap(&other->id_to_projects_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAllProjectsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllProjectsResponse_descriptor_;
  metadata.reflection = GetAllProjectsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAllProjectsResponse

// required .ProjectServerRequests.RESPONSE_ID ID = 1;
bool GetAllProjectsResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetAllProjectsResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GetAllProjectsResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetAllProjectsResponse::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::ProjectServerRequests::RESPONSE_ID GetAllProjectsResponse::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.GetAllProjectsResponse.ID)
  return static_cast< ::ProjectServerRequests::RESPONSE_ID >(id_);
}
 void GetAllProjectsResponse::set_id(::ProjectServerRequests::RESPONSE_ID value) {
  assert(::ProjectServerRequests::RESPONSE_ID_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.GetAllProjectsResponse.ID)
}

// map<int32, .ProjectServerRequests.Project> id_to_projects = 2;
int GetAllProjectsResponse::id_to_projects_size() const {
  return id_to_projects_.size();
}
void GetAllProjectsResponse::clear_id_to_projects() {
  id_to_projects_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >&
GetAllProjectsResponse::id_to_projects() const {
  // @@protoc_insertion_point(field_map:ProjectServerRequests.GetAllProjectsResponse.id_to_projects)
  return id_to_projects_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >*
GetAllProjectsResponse::mutable_id_to_projects() {
  // @@protoc_insertion_point(field_mutable_map:ProjectServerRequests.GetAllProjectsResponse.id_to_projects)
  return id_to_projects_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProjectServerRequests

// @@protoc_insertion_point(global_scope)
