// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: somerequests.proto

#ifndef PROTOBUF_somerequests_2eproto__INCLUDED
#define PROTOBUF_somerequests_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/map.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProjectServerRequests {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_somerequests_2eproto();
void protobuf_AssignDesc_somerequests_2eproto();
void protobuf_ShutdownFile_somerequests_2eproto();

class GetAllProjectsResponse;
class Participant;
class Project;
class SignUserRequest;
class SignUserResponse;
class Topic;

enum Topic_TYPE {
  Topic_TYPE_TASK = 0,
  Topic_TYPE_BUG = 1
};
bool Topic_TYPE_IsValid(int value);
const Topic_TYPE Topic_TYPE_TYPE_MIN = Topic_TYPE_TASK;
const Topic_TYPE Topic_TYPE_TYPE_MAX = Topic_TYPE_BUG;
const int Topic_TYPE_TYPE_ARRAYSIZE = Topic_TYPE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* Topic_TYPE_descriptor();
inline const ::std::string& Topic_TYPE_Name(Topic_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    Topic_TYPE_descriptor(), value);
}
inline bool Topic_TYPE_Parse(
    const ::std::string& name, Topic_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Topic_TYPE>(
    Topic_TYPE_descriptor(), name, value);
}
enum REQUEST_ID {
  REGISTER_USER_REQUEST = 0,
  AUTHORIZE_USER_REQUEST = 1,
  GET_ALL_PROJECTS_REQUEST = 2
};
bool REQUEST_ID_IsValid(int value);
const REQUEST_ID REQUEST_ID_MIN = REGISTER_USER_REQUEST;
const REQUEST_ID REQUEST_ID_MAX = GET_ALL_PROJECTS_REQUEST;
const int REQUEST_ID_ARRAYSIZE = REQUEST_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* REQUEST_ID_descriptor();
inline const ::std::string& REQUEST_ID_Name(REQUEST_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    REQUEST_ID_descriptor(), value);
}
inline bool REQUEST_ID_Parse(
    const ::std::string& name, REQUEST_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<REQUEST_ID>(
    REQUEST_ID_descriptor(), name, value);
}
enum RESPONSE_ID {
  REGISTER_USER_RESPONSE = 0,
  AUTHORIZE_USER_RESPONSE = 1,
  GET_ALL_PROJECTS_RESPONSE = 2
};
bool RESPONSE_ID_IsValid(int value);
const RESPONSE_ID RESPONSE_ID_MIN = REGISTER_USER_RESPONSE;
const RESPONSE_ID RESPONSE_ID_MAX = GET_ALL_PROJECTS_RESPONSE;
const int RESPONSE_ID_ARRAYSIZE = RESPONSE_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RESPONSE_ID_descriptor();
inline const ::std::string& RESPONSE_ID_Name(RESPONSE_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RESPONSE_ID_descriptor(), value);
}
inline bool RESPONSE_ID_Parse(
    const ::std::string& name, RESPONSE_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RESPONSE_ID>(
    RESPONSE_ID_descriptor(), name, value);
}
// ===================================================================

class Project : public ::google::protobuf::Message {
 public:
  Project();
  virtual ~Project();

  Project(const Project& from);

  inline Project& operator=(const Project& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Project& default_instance();

  void Swap(Project* other);

  // implements Message ----------------------------------------------

  inline Project* New() const { return New(NULL); }

  Project* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Project& from);
  void MergeFrom(const Project& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Project* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 owner_id = 2;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  ::google::protobuf::int32 owner_id() const;
  void set_owner_id(::google::protobuf::int32 value);

  // required int32 assignee_id = 3;
  bool has_assignee_id() const;
  void clear_assignee_id();
  static const int kAssigneeIdFieldNumber = 3;
  ::google::protobuf::int32 assignee_id() const;
  void set_assignee_id(::google::protobuf::int32 value);

  // repeated int32 topics_ids = 4;
  int topics_ids_size() const;
  void clear_topics_ids();
  static const int kTopicsIdsFieldNumber = 4;
  ::google::protobuf::int32 topics_ids(int index) const;
  void set_topics_ids(int index, ::google::protobuf::int32 value);
  void add_topics_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      topics_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_topics_ids();

  // repeated int32 participants_ids = 5;
  int participants_ids_size() const;
  void clear_participants_ids();
  static const int kParticipantsIdsFieldNumber = 5;
  ::google::protobuf::int32 participants_ids(int index) const;
  void set_participants_ids(int index, ::google::protobuf::int32 value);
  void add_participants_ids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      participants_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_participants_ids();

  // required string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:ProjectServerRequests.Project)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_assignee_id();
  inline void clear_has_assignee_id();
  inline void set_has_name();
  inline void clear_has_name();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 owner_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > topics_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > participants_ids_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 assignee_id_;
  friend void  protobuf_AddDesc_somerequests_2eproto();
  friend void protobuf_AssignDesc_somerequests_2eproto();
  friend void protobuf_ShutdownFile_somerequests_2eproto();

  void InitAsDefaultInstance();
  static Project* default_instance_;
};
// -------------------------------------------------------------------

class Participant : public ::google::protobuf::Message {
 public:
  Participant();
  virtual ~Participant();

  Participant(const Participant& from);

  inline Participant& operator=(const Participant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Participant& default_instance();

  void Swap(Participant* other);

  // implements Message ----------------------------------------------

  inline Participant* New() const { return New(NULL); }

  Participant* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Participant& from);
  void MergeFrom(const Participant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Participant* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string ip = 3 [default = "0.0.0.0"];
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 3;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:ProjectServerRequests.Participant)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ip();
  inline void clear_has_ip();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  static ::std::string* _default_ip_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_somerequests_2eproto();
  friend void protobuf_AssignDesc_somerequests_2eproto();
  friend void protobuf_ShutdownFile_somerequests_2eproto();

  void InitAsDefaultInstance();
  static Participant* default_instance_;
};
// -------------------------------------------------------------------

class Topic : public ::google::protobuf::Message {
 public:
  Topic();
  virtual ~Topic();

  Topic(const Topic& from);

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Topic& default_instance();

  void Swap(Topic* other);

  // implements Message ----------------------------------------------

  inline Topic* New() const { return New(NULL); }

  Topic* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Topic& from);
  void MergeFrom(const Topic& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Topic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Topic_TYPE TYPE;
  static const TYPE TASK = Topic_TYPE_TASK;
  static const TYPE BUG = Topic_TYPE_BUG;
  static inline bool TYPE_IsValid(int value) {
    return Topic_TYPE_IsValid(value);
  }
  static const TYPE TYPE_MIN =
    Topic_TYPE_TYPE_MIN;
  static const TYPE TYPE_MAX =
    Topic_TYPE_TYPE_MAX;
  static const int TYPE_ARRAYSIZE =
    Topic_TYPE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TYPE_descriptor() {
    return Topic_TYPE_descriptor();
  }
  static inline const ::std::string& TYPE_Name(TYPE value) {
    return Topic_TYPE_Name(value);
  }
  static inline bool TYPE_Parse(const ::std::string& name,
      TYPE* value) {
    return Topic_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 project_id = 2;
  bool has_project_id() const;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 2;
  ::google::protobuf::int32 project_id() const;
  void set_project_id(::google::protobuf::int32 value);

  // required int32 owner_id = 3;
  bool has_owner_id() const;
  void clear_owner_id();
  static const int kOwnerIdFieldNumber = 3;
  ::google::protobuf::int32 owner_id() const;
  void set_owner_id(::google::protobuf::int32 value);

  // required int32 assignee_id = 4;
  bool has_assignee_id() const;
  void clear_assignee_id();
  static const int kAssigneeIdFieldNumber = 4;
  ::google::protobuf::int32 assignee_id() const;
  void set_assignee_id(::google::protobuf::int32 value);

  // required .ProjectServerRequests.Topic.TYPE type = 6;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 6;
  ::ProjectServerRequests::Topic_TYPE type() const;
  void set_type(::ProjectServerRequests::Topic_TYPE value);

  // required string name = 5;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string description = 7;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 7;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // repeated string comments = 8;
  int comments_size() const;
  void clear_comments();
  static const int kCommentsFieldNumber = 8;
  const ::std::string& comments(int index) const;
  ::std::string* mutable_comments(int index);
  void set_comments(int index, const ::std::string& value);
  void set_comments(int index, const char* value);
  void set_comments(int index, const char* value, size_t size);
  ::std::string* add_comments();
  void add_comments(const ::std::string& value);
  void add_comments(const char* value);
  void add_comments(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& comments() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_comments();

  // @@protoc_insertion_point(class_scope:ProjectServerRequests.Topic)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_project_id();
  inline void clear_has_project_id();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_assignee_id();
  inline void clear_has_assignee_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 project_id_;
  ::google::protobuf::int32 owner_id_;
  ::google::protobuf::int32 assignee_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::RepeatedPtrField< ::std::string> comments_;
  int type_;
  friend void  protobuf_AddDesc_somerequests_2eproto();
  friend void protobuf_AssignDesc_somerequests_2eproto();
  friend void protobuf_ShutdownFile_somerequests_2eproto();

  void InitAsDefaultInstance();
  static Topic* default_instance_;
};
// -------------------------------------------------------------------

class SignUserRequest : public ::google::protobuf::Message {
 public:
  SignUserRequest();
  virtual ~SignUserRequest();

  SignUserRequest(const SignUserRequest& from);

  inline SignUserRequest& operator=(const SignUserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignUserRequest& default_instance();

  void Swap(SignUserRequest* other);

  // implements Message ----------------------------------------------

  inline SignUserRequest* New() const { return New(NULL); }

  SignUserRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignUserRequest& from);
  void MergeFrom(const SignUserRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .ProjectServerRequests.REQUEST_ID ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::ProjectServerRequests::REQUEST_ID id() const;
  void set_id(::ProjectServerRequests::REQUEST_ID value);

  // required string UserName = 2;
  bool has_username() const;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // required string UserPassword = 3;
  bool has_userpassword() const;
  void clear_userpassword();
  static const int kUserPasswordFieldNumber = 3;
  const ::std::string& userpassword() const;
  void set_userpassword(const ::std::string& value);
  void set_userpassword(const char* value);
  void set_userpassword(const char* value, size_t size);
  ::std::string* mutable_userpassword();
  ::std::string* release_userpassword();
  void set_allocated_userpassword(::std::string* userpassword);

  // @@protoc_insertion_point(class_scope:ProjectServerRequests.SignUserRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userpassword();
  inline void clear_has_userpassword();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr userpassword_;
  int id_;
  friend void  protobuf_AddDesc_somerequests_2eproto();
  friend void protobuf_AssignDesc_somerequests_2eproto();
  friend void protobuf_ShutdownFile_somerequests_2eproto();

  void InitAsDefaultInstance();
  static SignUserRequest* default_instance_;
};
// -------------------------------------------------------------------

class SignUserResponse : public ::google::protobuf::Message {
 public:
  SignUserResponse();
  virtual ~SignUserResponse();

  SignUserResponse(const SignUserResponse& from);

  inline SignUserResponse& operator=(const SignUserResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignUserResponse& default_instance();

  void Swap(SignUserResponse* other);

  // implements Message ----------------------------------------------

  inline SignUserResponse* New() const { return New(NULL); }

  SignUserResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignUserResponse& from);
  void MergeFrom(const SignUserResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SignUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProjectServerRequests.SignUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_somerequests_2eproto();
  friend void protobuf_AssignDesc_somerequests_2eproto();
  friend void protobuf_ShutdownFile_somerequests_2eproto();

  void InitAsDefaultInstance();
  static SignUserResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetAllProjectsResponse : public ::google::protobuf::Message {
 public:
  GetAllProjectsResponse();
  virtual ~GetAllProjectsResponse();

  GetAllProjectsResponse(const GetAllProjectsResponse& from);

  inline GetAllProjectsResponse& operator=(const GetAllProjectsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetAllProjectsResponse& default_instance();

  void Swap(GetAllProjectsResponse* other);

  // implements Message ----------------------------------------------

  inline GetAllProjectsResponse* New() const { return New(NULL); }

  GetAllProjectsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetAllProjectsResponse& from);
  void MergeFrom(const GetAllProjectsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetAllProjectsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // required .ProjectServerRequests.RESPONSE_ID ID = 1;
  bool has_id() const;
  void clear_id();
  static const int kIDFieldNumber = 1;
  ::ProjectServerRequests::RESPONSE_ID id() const;
  void set_id(::ProjectServerRequests::RESPONSE_ID value);

  // map<int32, .ProjectServerRequests.Project> id_to_projects = 2;
  int id_to_projects_size() const;
  void clear_id_to_projects();
  static const int kIdToProjectsFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >&
      id_to_projects() const;
  ::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >*
      mutable_id_to_projects();

  // @@protoc_insertion_point(class_scope:ProjectServerRequests.GetAllProjectsResponse)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  typedef ::google::protobuf::internal::MapEntryLite<
      ::google::protobuf::int32, ::ProjectServerRequests::Project,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      GetAllProjectsResponse_IdToProjectsEntry;
  ::google::protobuf::internal::MapField<
      ::google::protobuf::int32, ::ProjectServerRequests::Project,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > id_to_projects_;
  int id_;
  friend void  protobuf_AddDesc_somerequests_2eproto();
  friend void protobuf_AssignDesc_somerequests_2eproto();
  friend void protobuf_ShutdownFile_somerequests_2eproto();

  void InitAsDefaultInstance();
  static GetAllProjectsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Project

// required int32 id = 1;
inline bool Project::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Project::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Project::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Project::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Project::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.id)
  return id_;
}
inline void Project::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.id)
}

// required int32 owner_id = 2;
inline bool Project::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Project::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Project::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Project::clear_owner_id() {
  owner_id_ = 0;
  clear_has_owner_id();
}
inline ::google::protobuf::int32 Project::owner_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.owner_id)
  return owner_id_;
}
inline void Project::set_owner_id(::google::protobuf::int32 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.owner_id)
}

// required int32 assignee_id = 3;
inline bool Project::has_assignee_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Project::set_has_assignee_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Project::clear_has_assignee_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Project::clear_assignee_id() {
  assignee_id_ = 0;
  clear_has_assignee_id();
}
inline ::google::protobuf::int32 Project::assignee_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.assignee_id)
  return assignee_id_;
}
inline void Project::set_assignee_id(::google::protobuf::int32 value) {
  set_has_assignee_id();
  assignee_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.assignee_id)
}

// repeated int32 topics_ids = 4;
inline int Project::topics_ids_size() const {
  return topics_ids_.size();
}
inline void Project::clear_topics_ids() {
  topics_ids_.Clear();
}
inline ::google::protobuf::int32 Project::topics_ids(int index) const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.topics_ids)
  return topics_ids_.Get(index);
}
inline void Project::set_topics_ids(int index, ::google::protobuf::int32 value) {
  topics_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.topics_ids)
}
inline void Project::add_topics_ids(::google::protobuf::int32 value) {
  topics_ids_.Add(value);
  // @@protoc_insertion_point(field_add:ProjectServerRequests.Project.topics_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Project::topics_ids() const {
  // @@protoc_insertion_point(field_list:ProjectServerRequests.Project.topics_ids)
  return topics_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Project::mutable_topics_ids() {
  // @@protoc_insertion_point(field_mutable_list:ProjectServerRequests.Project.topics_ids)
  return &topics_ids_;
}

// repeated int32 participants_ids = 5;
inline int Project::participants_ids_size() const {
  return participants_ids_.size();
}
inline void Project::clear_participants_ids() {
  participants_ids_.Clear();
}
inline ::google::protobuf::int32 Project::participants_ids(int index) const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.participants_ids)
  return participants_ids_.Get(index);
}
inline void Project::set_participants_ids(int index, ::google::protobuf::int32 value) {
  participants_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.participants_ids)
}
inline void Project::add_participants_ids(::google::protobuf::int32 value) {
  participants_ids_.Add(value);
  // @@protoc_insertion_point(field_add:ProjectServerRequests.Project.participants_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Project::participants_ids() const {
  // @@protoc_insertion_point(field_list:ProjectServerRequests.Project.participants_ids)
  return participants_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Project::mutable_participants_ids() {
  // @@protoc_insertion_point(field_mutable_list:ProjectServerRequests.Project.participants_ids)
  return &participants_ids_;
}

// required string name = 6;
inline bool Project::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Project::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Project::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Project::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Project::name() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Project.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Project::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Project.name)
}
inline void Project::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Project.name)
}
inline void Project::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Project.name)
}
inline ::std::string* Project::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Project.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Project::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Project::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Project.name)
}

// -------------------------------------------------------------------

// Participant

// required int32 id = 1;
inline bool Participant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Participant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Participant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Participant::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Participant::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Participant.id)
  return id_;
}
inline void Participant::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Participant.id)
}

// required string name = 2;
inline bool Participant::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Participant::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Participant::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Participant::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Participant::name() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Participant.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Participant::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Participant.name)
}
inline void Participant::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Participant.name)
}
inline void Participant::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Participant.name)
}
inline ::std::string* Participant::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Participant.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Participant::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Participant::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Participant.name)
}

// optional string ip = 3 [default = "0.0.0.0"];
inline bool Participant::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Participant::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Participant::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Participant::clear_ip() {
  ip_.ClearToDefaultNoArena(_default_ip_);
  clear_has_ip();
}
inline const ::std::string& Participant::ip() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Participant.ip)
  return ip_.GetNoArena(_default_ip_);
}
inline void Participant::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_, value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Participant.ip)
}
inline void Participant::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Participant.ip)
}
inline void Participant::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(_default_ip_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Participant.ip)
}
inline ::std::string* Participant::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Participant.ip)
  return ip_.MutableNoArena(_default_ip_);
}
inline ::std::string* Participant::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(_default_ip_);
}
inline void Participant::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(_default_ip_, ip);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Participant.ip)
}

// -------------------------------------------------------------------

// Topic

// required int32 id = 1;
inline bool Topic::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Topic::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Topic::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Topic::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Topic::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.id)
  return id_;
}
inline void Topic::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.id)
}

// required int32 project_id = 2;
inline bool Topic::has_project_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Topic::set_has_project_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Topic::clear_has_project_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Topic::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
inline ::google::protobuf::int32 Topic::project_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.project_id)
  return project_id_;
}
inline void Topic::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.project_id)
}

// required int32 owner_id = 3;
inline bool Topic::has_owner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Topic::set_has_owner_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Topic::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Topic::clear_owner_id() {
  owner_id_ = 0;
  clear_has_owner_id();
}
inline ::google::protobuf::int32 Topic::owner_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.owner_id)
  return owner_id_;
}
inline void Topic::set_owner_id(::google::protobuf::int32 value) {
  set_has_owner_id();
  owner_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.owner_id)
}

// required int32 assignee_id = 4;
inline bool Topic::has_assignee_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Topic::set_has_assignee_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Topic::clear_has_assignee_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Topic::clear_assignee_id() {
  assignee_id_ = 0;
  clear_has_assignee_id();
}
inline ::google::protobuf::int32 Topic::assignee_id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.assignee_id)
  return assignee_id_;
}
inline void Topic::set_assignee_id(::google::protobuf::int32 value) {
  set_has_assignee_id();
  assignee_id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.assignee_id)
}

// required .ProjectServerRequests.Topic.TYPE type = 6;
inline bool Topic::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Topic::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Topic::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Topic::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::ProjectServerRequests::Topic_TYPE Topic::type() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.type)
  return static_cast< ::ProjectServerRequests::Topic_TYPE >(type_);
}
inline void Topic::set_type(::ProjectServerRequests::Topic_TYPE value) {
  assert(::ProjectServerRequests::Topic_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.type)
}

// required string name = 5;
inline bool Topic::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Topic::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Topic::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Topic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Topic::name() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.name)
}
inline void Topic::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Topic.name)
}
inline void Topic::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Topic.name)
}
inline ::std::string* Topic::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Topic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Topic::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Topic.name)
}

// required string description = 7;
inline bool Topic::has_description() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Topic::set_has_description() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Topic::clear_has_description() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Topic::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& Topic::description() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.description)
}
inline void Topic::set_description(const char* value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Topic.description)
}
inline void Topic::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Topic.description)
}
inline ::std::string* Topic::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Topic.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Topic::release_description() {
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.Topic.description)
}

// repeated string comments = 8;
inline int Topic::comments_size() const {
  return comments_.size();
}
inline void Topic::clear_comments() {
  comments_.Clear();
}
inline const ::std::string& Topic::comments(int index) const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.Topic.comments)
  return comments_.Get(index);
}
inline ::std::string* Topic::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.Topic.comments)
  return comments_.Mutable(index);
}
inline void Topic::set_comments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ProjectServerRequests.Topic.comments)
  comments_.Mutable(index)->assign(value);
}
inline void Topic::set_comments(int index, const char* value) {
  comments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.Topic.comments)
}
inline void Topic::set_comments(int index, const char* value, size_t size) {
  comments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.Topic.comments)
}
inline ::std::string* Topic::add_comments() {
  return comments_.Add();
}
inline void Topic::add_comments(const ::std::string& value) {
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ProjectServerRequests.Topic.comments)
}
inline void Topic::add_comments(const char* value) {
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ProjectServerRequests.Topic.comments)
}
inline void Topic::add_comments(const char* value, size_t size) {
  comments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ProjectServerRequests.Topic.comments)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Topic::comments() const {
  // @@protoc_insertion_point(field_list:ProjectServerRequests.Topic.comments)
  return comments_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Topic::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:ProjectServerRequests.Topic.comments)
  return &comments_;
}

// -------------------------------------------------------------------

// SignUserRequest

// required .ProjectServerRequests.REQUEST_ID ID = 1;
inline bool SignUserRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignUserRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignUserRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignUserRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::ProjectServerRequests::REQUEST_ID SignUserRequest::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.SignUserRequest.ID)
  return static_cast< ::ProjectServerRequests::REQUEST_ID >(id_);
}
inline void SignUserRequest::set_id(::ProjectServerRequests::REQUEST_ID value) {
  assert(::ProjectServerRequests::REQUEST_ID_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.SignUserRequest.ID)
}

// required string UserName = 2;
inline bool SignUserRequest::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignUserRequest::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignUserRequest::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignUserRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
inline const ::std::string& SignUserRequest::username() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.SignUserRequest.UserName)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignUserRequest::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.SignUserRequest.UserName)
}
inline void SignUserRequest::set_username(const char* value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.SignUserRequest.UserName)
}
inline void SignUserRequest::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.SignUserRequest.UserName)
}
inline ::std::string* SignUserRequest::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.SignUserRequest.UserName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignUserRequest::release_username() {
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignUserRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.SignUserRequest.UserName)
}

// required string UserPassword = 3;
inline bool SignUserRequest::has_userpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignUserRequest::set_has_userpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignUserRequest::clear_has_userpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignUserRequest::clear_userpassword() {
  userpassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userpassword();
}
inline const ::std::string& SignUserRequest::userpassword() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.SignUserRequest.UserPassword)
  return userpassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignUserRequest::set_userpassword(const ::std::string& value) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProjectServerRequests.SignUserRequest.UserPassword)
}
inline void SignUserRequest::set_userpassword(const char* value) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProjectServerRequests.SignUserRequest.UserPassword)
}
inline void SignUserRequest::set_userpassword(const char* value, size_t size) {
  set_has_userpassword();
  userpassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProjectServerRequests.SignUserRequest.UserPassword)
}
inline ::std::string* SignUserRequest::mutable_userpassword() {
  set_has_userpassword();
  // @@protoc_insertion_point(field_mutable:ProjectServerRequests.SignUserRequest.UserPassword)
  return userpassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignUserRequest::release_userpassword() {
  clear_has_userpassword();
  return userpassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignUserRequest::set_allocated_userpassword(::std::string* userpassword) {
  if (userpassword != NULL) {
    set_has_userpassword();
  } else {
    clear_has_userpassword();
  }
  userpassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userpassword);
  // @@protoc_insertion_point(field_set_allocated:ProjectServerRequests.SignUserRequest.UserPassword)
}

// -------------------------------------------------------------------

// SignUserResponse

// -------------------------------------------------------------------

// GetAllProjectsResponse

// required .ProjectServerRequests.RESPONSE_ID ID = 1;
inline bool GetAllProjectsResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetAllProjectsResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetAllProjectsResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetAllProjectsResponse::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::ProjectServerRequests::RESPONSE_ID GetAllProjectsResponse::id() const {
  // @@protoc_insertion_point(field_get:ProjectServerRequests.GetAllProjectsResponse.ID)
  return static_cast< ::ProjectServerRequests::RESPONSE_ID >(id_);
}
inline void GetAllProjectsResponse::set_id(::ProjectServerRequests::RESPONSE_ID value) {
  assert(::ProjectServerRequests::RESPONSE_ID_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ProjectServerRequests.GetAllProjectsResponse.ID)
}

// map<int32, .ProjectServerRequests.Project> id_to_projects = 2;
inline int GetAllProjectsResponse::id_to_projects_size() const {
  return id_to_projects_.size();
}
inline void GetAllProjectsResponse::clear_id_to_projects() {
  id_to_projects_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >&
GetAllProjectsResponse::id_to_projects() const {
  // @@protoc_insertion_point(field_map:ProjectServerRequests.GetAllProjectsResponse.id_to_projects)
  return id_to_projects_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::int32, ::ProjectServerRequests::Project >*
GetAllProjectsResponse::mutable_id_to_projects() {
  // @@protoc_insertion_point(field_mutable_map:ProjectServerRequests.GetAllProjectsResponse.id_to_projects)
  return id_to_projects_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProjectServerRequests

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ProjectServerRequests::Topic_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProjectServerRequests::Topic_TYPE>() {
  return ::ProjectServerRequests::Topic_TYPE_descriptor();
}
template <> struct is_proto_enum< ::ProjectServerRequests::REQUEST_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProjectServerRequests::REQUEST_ID>() {
  return ::ProjectServerRequests::REQUEST_ID_descriptor();
}
template <> struct is_proto_enum< ::ProjectServerRequests::RESPONSE_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProjectServerRequests::RESPONSE_ID>() {
  return ::ProjectServerRequests::RESPONSE_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_somerequests_2eproto__INCLUDED
